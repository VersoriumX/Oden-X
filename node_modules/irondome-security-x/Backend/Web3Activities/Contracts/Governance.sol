// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract Governance {
    struct Proposal {
        uint256 id;
        string description;
        uint256 voteCount;
        address proposer;
        bool executed;
    }

    mapping(uint256 => Proposal) public proposals;
    mapping(address => uint256) public votes;
    uint256 public proposalCount;
    address public owner;

    event ProposalCreated(uint256 id, string description, address proposer);
    event Voted(uint256 proposalId, address voter);
    event ProposalExecuted(uint256 proposalId);

    modifier onlyOwner() {
        require(msg.sender == owner, "Only the owner can execute this");
        _;
    }

    constructor() {
        owner = msg.sender; // Set the contract deployer as the owner
    }

    // Create a new proposal
    function createProposal(string memory _description) public {
        proposalCount++;
        proposals[proposalCount] = Proposal(proposalCount, _description, 0, msg.sender, false);
        
        emit ProposalCreated(proposalCount, _description, msg.sender);
    }

    // Vote on a proposal
    function vote(uint256 _proposalId) public {
        require(_proposalId > 0 && _proposalId <= proposalCount, "Proposal does not exist");
        require(votes[msg.sender] == 0, "You have already voted");

        proposals[_proposalId].voteCount++;
        votes[msg.sender] = _proposalId;

        emit Voted(_proposalId, msg.sender);
    }

    // Execute a proposal if it has enough votes
    function executeProposal(uint256 _proposalId) public onlyOwner {
        require(_proposalId > 0 && _proposalId <= proposalCount, "Proposal does not exist");
        require(!proposals[_proposalId].executed, "Proposal already executed");
        require(proposals[_proposalId].voteCount > 0, "Not enough votes to execute");

        proposals[_proposalId].executed = true;

        // Here you can add logic to execute the proposal's action
        // For example, changing a state variable or transferring tokens

        emit ProposalExecuted(_proposalId);
    }

    // Get proposal details
    function getProposal(uint256 _proposalId) public view returns (uint256, string memory, uint256, address, bool) {
        Proposal memory proposal = proposals[_proposalId];
        return (proposal.id, proposal.description, proposal.voteCount, proposal.proposer, proposal.executed);
    }
}
