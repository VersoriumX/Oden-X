// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract Marketplace {
    struct Item {
        uint256 id;
        string name;
        string description;
        uint256 price;
        address payable owner;
        bool sold;
    }

    mapping(uint256 => Item) public items;
    uint256 public itemCount;

    event ItemListed(uint256 id, string name, uint256 price, address owner);
    event ItemSold(uint256 id, address buyer);

    // List a new item for sale
    function listItem(string memory _name, string memory _description, uint256 _price) public {
        require(_price > 0, "Price must be greater than zero");
        
        itemCount++;
        items[itemCount] = Item(itemCount, _name, _description, _price, payable(msg.sender), false);
        
        emit ItemListed(itemCount, _name, _price, msg.sender);
    }

    // Purchase an item
    function purchaseItem(uint256 _id) public payable {
        Item storage item = items[_id];
        
        require(_id > 0 && _id <= itemCount, "Item does not exist");
        require(msg.value >= item.price, "Insufficient funds sent");
        require(!item.sold, "Item already sold");
        require(item.owner != msg.sender, "Owner cannot buy their own item");

        // Transfer ownership
        item.owner.transfer(msg.value);
        item.sold = true;
        item.owner = payable(msg.sender);

        emit ItemSold(_id, msg.sender);
    }

    // Get item details
    function getItem(uint256 _id) public view returns (uint256, string memory, string memory, uint256, address, bool) {
        Item memory item = items[_id];
        return (item.id, item.name, item.description, item.price, item.owner, item.sold);
    }
}
